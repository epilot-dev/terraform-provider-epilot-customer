// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-customer/internal/sdk/pkg/types"
	"github.com/epilot-dev/terraform-provider-epilot-customer/internal/sdk/pkg/utils"
)

type Salutation string

const (
	SalutationMr                   Salutation = "Mr."
	SalutationMsMrs                Salutation = "Ms. / Mrs."
	SalutationCompany              Salutation = "Company"
	SalutationContactPerson        Salutation = "Contact Person"
	SalutationCompanyContactPerson Salutation = "Company/Contact Person"
	SalutationSpouse               Salutation = "Spouse"
	SalutationFamily               Salutation = "Family"
	SalutationOwnership            Salutation = "Ownership"
	SalutationAssembly             Salutation = "Assembly"
	SalutationOther                Salutation = "Other"
)

func (e Salutation) ToPointer() *Salutation {
	return &e
}

func (e *Salutation) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Mr.":
		fallthrough
	case "Ms. / Mrs.":
		fallthrough
	case "Company":
		fallthrough
	case "Contact Person":
		fallthrough
	case "Company/Contact Person":
		fallthrough
	case "Spouse":
		fallthrough
	case "Family":
		fallthrough
	case "Ownership":
		fallthrough
	case "Assembly":
		fallthrough
	case "Other":
		*e = Salutation(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Salutation: %v", v)
	}
}

type Title string

const (
	TitleDr     Title = "Dr."
	TitleProf   Title = "Prof."
	TitleProfDr Title = "Prof. Dr."
)

func (e Title) ToPointer() *Title {
	return &e
}

func (e *Title) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Dr.":
		fallthrough
	case "Prof.":
		fallthrough
	case "Prof. Dr.":
		*e = Title(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Title: %v", v)
	}
}

type BaseContact struct {
	Account *BaseRelation `json:"account,omitempty"`
	// Addresses as a list of object, the element with index 0 is treated as the primary one.
	//
	Address        []BaseAddress `json:"address,omitempty"`
	Birthdate      *types.Date   `json:"birthdate,omitempty"`
	CustomerNumber *string       `json:"customer_number,omitempty"`
	// Email addresses as a list of object, the element with index 0 is treated as the primary one.
	//
	Email     []BaseEmail `json:"email,omitempty"`
	FirstName *string     `json:"first_name,omitempty"`
	LastName  *string     `json:"last_name,omitempty"`
	// Phone numbers as a list of object, the element with index 0 is treated as the primary one.
	//
	Phone      []BasePhone `json:"phone,omitempty"`
	Salutation *Salutation `json:"salutation,omitempty"`
	Title      *Title      `json:"title,omitempty"`
}

func (b BaseContact) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(b, "", false)
}

func (b *BaseContact) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &b, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *BaseContact) GetAccount() *BaseRelation {
	if o == nil {
		return nil
	}
	return o.Account
}

func (o *BaseContact) GetAddress() []BaseAddress {
	if o == nil {
		return nil
	}
	return o.Address
}

func (o *BaseContact) GetBirthdate() *types.Date {
	if o == nil {
		return nil
	}
	return o.Birthdate
}

func (o *BaseContact) GetCustomerNumber() *string {
	if o == nil {
		return nil
	}
	return o.CustomerNumber
}

func (o *BaseContact) GetEmail() []BaseEmail {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *BaseContact) GetFirstName() *string {
	if o == nil {
		return nil
	}
	return o.FirstName
}

func (o *BaseContact) GetLastName() *string {
	if o == nil {
		return nil
	}
	return o.LastName
}

func (o *BaseContact) GetPhone() []BasePhone {
	if o == nil {
		return nil
	}
	return o.Phone
}

func (o *BaseContact) GetSalutation() *Salutation {
	if o == nil {
		return nil
	}
	return o.Salutation
}

func (o *BaseContact) GetTitle() *Title {
	if o == nil {
		return nil
	}
	return o.Title
}
