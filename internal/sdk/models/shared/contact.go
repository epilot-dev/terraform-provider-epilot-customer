// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-customer/internal/sdk/internal/utils"
	"github.com/epilot-dev/terraform-provider-epilot-customer/internal/sdk/types"
	"time"
)

type ContactSalutation string

const (
	ContactSalutationMr                   ContactSalutation = "Mr."
	ContactSalutationMsMrs                ContactSalutation = "Ms. / Mrs."
	ContactSalutationCompany              ContactSalutation = "Company"
	ContactSalutationContactPerson        ContactSalutation = "Contact Person"
	ContactSalutationCompanyContactPerson ContactSalutation = "Company/Contact Person"
	ContactSalutationSpouse               ContactSalutation = "Spouse"
	ContactSalutationFamily               ContactSalutation = "Family"
	ContactSalutationOwnership            ContactSalutation = "Ownership"
	ContactSalutationAssembly             ContactSalutation = "Assembly"
	ContactSalutationOther                ContactSalutation = "Other"
)

func (e ContactSalutation) ToPointer() *ContactSalutation {
	return &e
}

func (e *ContactSalutation) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Mr.":
		fallthrough
	case "Ms. / Mrs.":
		fallthrough
	case "Company":
		fallthrough
	case "Contact Person":
		fallthrough
	case "Company/Contact Person":
		fallthrough
	case "Spouse":
		fallthrough
	case "Family":
		fallthrough
	case "Ownership":
		fallthrough
	case "Assembly":
		fallthrough
	case "Other":
		*e = ContactSalutation(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ContactSalutation: %v", v)
	}
}

type ContactTitle string

const (
	ContactTitleDr     ContactTitle = "Dr."
	ContactTitleProf   ContactTitle = "Prof."
	ContactTitleProfDr ContactTitle = "Prof. Dr."
)

func (e ContactTitle) ToPointer() *ContactTitle {
	return &e
}

func (e *ContactTitle) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Dr.":
		fallthrough
	case "Prof.":
		fallthrough
	case "Prof. Dr.":
		*e = ContactTitle(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ContactTitle: %v", v)
	}
}

type Contact struct {
	// Access control list (ACL) for an entity. Defines sharing access to external orgs or users.
	ACL       BaseEntityACL `json:"_acl"`
	CreatedAt time.Time     `json:"_created_at"`
	ID        string        `json:"_id"`
	// Organization Id the entity belongs to
	Org       string            `json:"_org"`
	Owners    []BaseEntityOwner `json:"_owners"`
	Schema    string            `json:"_schema"`
	Tags      []string          `json:"_tags"`
	Title1    string            `json:"_title"`
	UpdatedAt time.Time         `json:"_updated_at"`
	Account   *BaseRelation     `json:"account,omitempty"`
	// Addresses as a list of object, the element with index 0 is treated as the primary one.
	//
	Address        []BaseAddress `json:"address,omitempty"`
	Birthdate      *types.Date   `json:"birthdate,omitempty"`
	CustomerNumber *string       `json:"customer_number,omitempty"`
	// Email addresses as a list of object, the element with index 0 is treated as the primary one.
	//
	Email     []BaseEmail `json:"email,omitempty"`
	FirstName string      `json:"first_name"`
	LastName  string      `json:"last_name"`
	// Phone numbers as a list of object, the element with index 0 is treated as the primary one.
	//
	Phone      []BasePhone        `json:"phone,omitempty"`
	Salutation *ContactSalutation `json:"salutation,omitempty"`
	Title      *ContactTitle      `json:"title,omitempty"`
}

func (c Contact) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *Contact) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Contact) GetACL() BaseEntityACL {
	if o == nil {
		return BaseEntityACL{}
	}
	return o.ACL
}

func (o *Contact) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *Contact) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Contact) GetOrg() string {
	if o == nil {
		return ""
	}
	return o.Org
}

func (o *Contact) GetOwners() []BaseEntityOwner {
	if o == nil {
		return []BaseEntityOwner{}
	}
	return o.Owners
}

func (o *Contact) GetSchema() string {
	if o == nil {
		return ""
	}
	return o.Schema
}

func (o *Contact) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *Contact) GetTitle1() string {
	if o == nil {
		return ""
	}
	return o.Title1
}

func (o *Contact) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

func (o *Contact) GetAccount() *BaseRelation {
	if o == nil {
		return nil
	}
	return o.Account
}

func (o *Contact) GetAddress() []BaseAddress {
	if o == nil {
		return nil
	}
	return o.Address
}

func (o *Contact) GetBirthdate() *types.Date {
	if o == nil {
		return nil
	}
	return o.Birthdate
}

func (o *Contact) GetCustomerNumber() *string {
	if o == nil {
		return nil
	}
	return o.CustomerNumber
}

func (o *Contact) GetEmail() []BaseEmail {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *Contact) GetFirstName() string {
	if o == nil {
		return ""
	}
	return o.FirstName
}

func (o *Contact) GetLastName() string {
	if o == nil {
		return ""
	}
	return o.LastName
}

func (o *Contact) GetPhone() []BasePhone {
	if o == nil {
		return nil
	}
	return o.Phone
}

func (o *Contact) GetSalutation() *ContactSalutation {
	if o == nil {
		return nil
	}
	return o.Salutation
}

func (o *Contact) GetTitle() *ContactTitle {
	if o == nil {
		return nil
	}
	return o.Title
}
