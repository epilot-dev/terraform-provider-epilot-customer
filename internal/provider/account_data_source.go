// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	tfTypes "github.com/epilot-dev/terraform-provider-epilot-customer/internal/provider/types"
	"github.com/epilot-dev/terraform-provider-epilot-customer/internal/sdk"
	"github.com/epilot-dev/terraform-provider-epilot-customer/internal/sdk/models/operations"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &AccountDataSource{}
var _ datasource.DataSourceWithConfigure = &AccountDataSource{}

func NewAccountDataSource() datasource.DataSource {
	return &AccountDataSource{}
}

// AccountDataSource is the data source implementation.
type AccountDataSource struct {
	client *sdk.SDK
}

// AccountDataSourceModel describes the data model.
type AccountDataSourceModel struct {
	ACL            tfTypes.BaseEntityACL     `tfsdk:"acl"`
	CreatedAt      types.String              `tfsdk:"created_at"`
	Org            types.String              `tfsdk:"org"`
	Owners         []tfTypes.BaseEntityOwner `tfsdk:"owners"`
	Schema         types.String              `tfsdk:"schema"`
	Tags           []types.String            `tfsdk:"tags"`
	Title          types.String              `tfsdk:"title"`
	UpdatedAt      types.String              `tfsdk:"updated_at"`
	Address        []tfTypes.BaseAddress     `tfsdk:"address"`
	CustomerNumber types.String              `tfsdk:"customer_number"`
	Email          []tfTypes.BaseEmail       `tfsdk:"email"`
	Hydrate        types.Bool                `tfsdk:"hydrate"`
	ID             types.String              `tfsdk:"id"`
	Name           types.String              `tfsdk:"name"`
	Phone          []tfTypes.BasePhone       `tfsdk:"phone"`
	Website        types.String              `tfsdk:"website"`
}

// Metadata returns the data source type name.
func (r *AccountDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_account"
}

// Schema defines the schema for the data source.
func (r *AccountDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Account DataSource",

		Attributes: map[string]schema.Attribute{
			"acl": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"additional_properties": schema.StringAttribute{
						Computed:    true,
						Description: `Parsed as JSON.`,
					},
					"delete": schema.ListAttribute{
						Computed:    true,
						ElementType: types.StringType,
					},
					"edit": schema.ListAttribute{
						Computed:    true,
						ElementType: types.StringType,
					},
					"view": schema.ListAttribute{
						Computed:    true,
						ElementType: types.StringType,
					},
				},
				Description: `Access control list (ACL) for an entity. Defines sharing access to external orgs or users.`,
			},
			"created_at": schema.StringAttribute{
				Computed: true,
			},
			"org": schema.StringAttribute{
				Computed:    true,
				Description: `Organization Id the entity belongs to`,
			},
			"owners": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"org_id": schema.StringAttribute{
							Computed: true,
						},
						"user_id": schema.StringAttribute{
							Computed: true,
						},
					},
				},
			},
			"schema": schema.StringAttribute{
				Computed: true,
			},
			"tags": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
			},
			"title": schema.StringAttribute{
				Computed: true,
			},
			"updated_at": schema.StringAttribute{
				Computed: true,
			},
			"address": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"id": schema.StringAttribute{
							Computed: true,
						},
						"tags": schema.ListAttribute{
							Computed:    true,
							ElementType: types.StringType,
						},
						"additional_info": schema.StringAttribute{
							Computed: true,
						},
						"city": schema.StringAttribute{
							Computed: true,
						},
						"country": schema.StringAttribute{
							Computed:    true,
							Description: `must be one of ["DE", "AT", "CH"]`,
						},
						"postal_code": schema.StringAttribute{
							Computed: true,
						},
						"street": schema.StringAttribute{
							Computed: true,
						},
						"street_number": schema.StringAttribute{
							Computed: true,
						},
					},
				},
				MarkdownDescription: `Addresses as a list of object, the element with index 0 is treated as the primary one.` + "\n" +
					``,
			},
			"customer_number": schema.StringAttribute{
				Computed: true,
			},
			"email": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"id": schema.StringAttribute{
							Computed: true,
						},
						"tags": schema.ListAttribute{
							Computed:    true,
							ElementType: types.StringType,
						},
						"email": schema.StringAttribute{
							Computed: true,
						},
					},
				},
				MarkdownDescription: `Email addresses as a list of object, the element with index 0 is treated as the primary one.` + "\n" +
					``,
			},
			"hydrate": schema.BoolAttribute{
				Optional:    true,
				Description: `Hydrates entities in relations when passed true`,
			},
			"id": schema.StringAttribute{
				Required:    true,
				Description: `Account ID`,
			},
			"name": schema.StringAttribute{
				Computed: true,
			},
			"phone": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"id": schema.StringAttribute{
							Computed: true,
						},
						"tags": schema.ListAttribute{
							Computed:    true,
							ElementType: types.StringType,
						},
						"phone": schema.StringAttribute{
							Computed: true,
						},
					},
				},
				MarkdownDescription: `Phone numbers as a list of object, the element with index 0 is treated as the primary one.` + "\n" +
					``,
			},
			"website": schema.StringAttribute{
				Computed: true,
			},
		},
	}
}

func (r *AccountDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.SDK)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.SDK, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *AccountDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *AccountDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	accountID := data.ID.ValueString()
	hydrate := new(bool)
	if !data.Hydrate.IsUnknown() && !data.Hydrate.IsNull() {
		*hydrate = data.Hydrate.ValueBool()
	} else {
		hydrate = nil
	}
	request := operations.GetAccountRequest{
		AccountID: accountID,
		Hydrate:   hydrate,
	}
	res, err := r.client.Account.GetAccount(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.Account == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedAccount(res.Account)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
