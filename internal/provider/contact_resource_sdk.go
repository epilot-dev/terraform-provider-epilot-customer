// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"encoding/json"
	tfTypes "github.com/epilot-dev/terraform-provider-epilot-customer/internal/provider/types"
	"github.com/epilot-dev/terraform-provider-epilot-customer/internal/sdk/models/shared"
	customTypes "github.com/epilot-dev/terraform-provider-epilot-customer/internal/sdk/types"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *ContactResourceModel) ToSharedContactCreate() *shared.ContactCreate {
	var account *shared.BaseRelation
	if r.Account != nil {
		var dollarRelation []shared.DollarRelation = nil
		for _, dollarRelationItem := range r.Account.DollarRelation {
			var tags []string = nil
			for _, tagsItem := range dollarRelationItem.Tags {
				tags = append(tags, tagsItem.ValueString())
			}
			entityID := dollarRelationItem.EntityID.ValueString()
			dollarRelation = append(dollarRelation, shared.DollarRelation{
				Tags:     tags,
				EntityID: entityID,
			})
		}
		var additionalProperties interface{}
		if !r.Account.AdditionalProperties.IsUnknown() && !r.Account.AdditionalProperties.IsNull() {
			_ = json.Unmarshal([]byte(r.Account.AdditionalProperties.ValueString()), &additionalProperties)
		}
		account = &shared.BaseRelation{
			DollarRelation:       dollarRelation,
			AdditionalProperties: additionalProperties,
		}
	}
	var address []shared.BaseAddress = nil
	for _, addressItem := range r.Address {
		id := new(string)
		if !addressItem.ID.IsUnknown() && !addressItem.ID.IsNull() {
			*id = addressItem.ID.ValueString()
		} else {
			id = nil
		}
		var tags1 []string = nil
		for _, tagsItem1 := range addressItem.Tags {
			tags1 = append(tags1, tagsItem1.ValueString())
		}
		additionalInfo := new(string)
		if !addressItem.AdditionalInfo.IsUnknown() && !addressItem.AdditionalInfo.IsNull() {
			*additionalInfo = addressItem.AdditionalInfo.ValueString()
		} else {
			additionalInfo = nil
		}
		city := new(string)
		if !addressItem.City.IsUnknown() && !addressItem.City.IsNull() {
			*city = addressItem.City.ValueString()
		} else {
			city = nil
		}
		country := new(shared.Country)
		if !addressItem.Country.IsUnknown() && !addressItem.Country.IsNull() {
			*country = shared.Country(addressItem.Country.ValueString())
		} else {
			country = nil
		}
		postalCode := new(string)
		if !addressItem.PostalCode.IsUnknown() && !addressItem.PostalCode.IsNull() {
			*postalCode = addressItem.PostalCode.ValueString()
		} else {
			postalCode = nil
		}
		street := new(string)
		if !addressItem.Street.IsUnknown() && !addressItem.Street.IsNull() {
			*street = addressItem.Street.ValueString()
		} else {
			street = nil
		}
		streetNumber := new(string)
		if !addressItem.StreetNumber.IsUnknown() && !addressItem.StreetNumber.IsNull() {
			*streetNumber = addressItem.StreetNumber.ValueString()
		} else {
			streetNumber = nil
		}
		address = append(address, shared.BaseAddress{
			ID:             id,
			Tags:           tags1,
			AdditionalInfo: additionalInfo,
			City:           city,
			Country:        country,
			PostalCode:     postalCode,
			Street:         street,
			StreetNumber:   streetNumber,
		})
	}
	birthdate := new(customTypes.Date)
	if !r.Birthdate.IsUnknown() && !r.Birthdate.IsNull() {
		birthdate = customTypes.MustNewDateFromString(r.Birthdate.ValueString())
	} else {
		birthdate = nil
	}
	customerNumber := new(string)
	if !r.CustomerNumber.IsUnknown() && !r.CustomerNumber.IsNull() {
		*customerNumber = r.CustomerNumber.ValueString()
	} else {
		customerNumber = nil
	}
	var email []shared.BaseEmail = nil
	for _, emailItem := range r.Email {
		id1 := new(string)
		if !emailItem.ID.IsUnknown() && !emailItem.ID.IsNull() {
			*id1 = emailItem.ID.ValueString()
		} else {
			id1 = nil
		}
		var tags2 []string = nil
		for _, tagsItem2 := range emailItem.Tags {
			tags2 = append(tags2, tagsItem2.ValueString())
		}
		email1 := emailItem.Email.ValueString()
		email = append(email, shared.BaseEmail{
			ID:    id1,
			Tags:  tags2,
			Email: email1,
		})
	}
	firstName := r.FirstName.ValueString()
	lastName := r.LastName.ValueString()
	var phone []shared.BasePhone = nil
	for _, phoneItem := range r.Phone {
		id2 := new(string)
		if !phoneItem.ID.IsUnknown() && !phoneItem.ID.IsNull() {
			*id2 = phoneItem.ID.ValueString()
		} else {
			id2 = nil
		}
		var tags3 []string = nil
		for _, tagsItem3 := range phoneItem.Tags {
			tags3 = append(tags3, tagsItem3.ValueString())
		}
		phone1 := phoneItem.Phone.ValueString()
		phone = append(phone, shared.BasePhone{
			ID:    id2,
			Tags:  tags3,
			Phone: phone1,
		})
	}
	salutation := new(shared.ContactCreateSalutation)
	if !r.Salutation.IsUnknown() && !r.Salutation.IsNull() {
		*salutation = shared.ContactCreateSalutation(r.Salutation.ValueString())
	} else {
		salutation = nil
	}
	title := new(shared.ContactCreateTitle)
	if !r.Title.IsUnknown() && !r.Title.IsNull() {
		*title = shared.ContactCreateTitle(r.Title.ValueString())
	} else {
		title = nil
	}
	out := shared.ContactCreate{
		Account:        account,
		Address:        address,
		Birthdate:      birthdate,
		CustomerNumber: customerNumber,
		Email:          email,
		FirstName:      firstName,
		LastName:       lastName,
		Phone:          phone,
		Salutation:     salutation,
		Title:          title,
	}
	return &out
}

func (r *ContactResourceModel) RefreshFromSharedContact(resp *shared.Contact) {
	if resp != nil {
		if resp.ACL.AdditionalProperties == nil {
			r.ACL.AdditionalProperties = types.StringNull()
		} else {
			additionalPropertiesResult, _ := json.Marshal(resp.ACL.AdditionalProperties)
			r.ACL.AdditionalProperties = types.StringValue(string(additionalPropertiesResult))
		}
		r.ACL.Delete = []types.String{}
		for _, v := range resp.ACL.Delete {
			r.ACL.Delete = append(r.ACL.Delete, types.StringValue(v))
		}
		r.ACL.Edit = []types.String{}
		for _, v := range resp.ACL.Edit {
			r.ACL.Edit = append(r.ACL.Edit, types.StringValue(v))
		}
		r.ACL.View = []types.String{}
		for _, v := range resp.ACL.View {
			r.ACL.View = append(r.ACL.View, types.StringValue(v))
		}
		r.CreatedAt = types.StringValue(resp.CreatedAt.Format(time.RFC3339Nano))
		r.ID = types.StringValue(resp.ID)
		r.Org = types.StringValue(resp.Org)
		if len(r.Owners) > len(resp.Owners) {
			r.Owners = r.Owners[:len(resp.Owners)]
		}
		for ownersCount, ownersItem := range resp.Owners {
			var owners1 tfTypes.BaseEntityOwner
			owners1.OrgID = types.StringValue(ownersItem.OrgID)
			owners1.UserID = types.StringPointerValue(ownersItem.UserID)
			if ownersCount+1 > len(r.Owners) {
				r.Owners = append(r.Owners, owners1)
			} else {
				r.Owners[ownersCount].OrgID = owners1.OrgID
				r.Owners[ownersCount].UserID = owners1.UserID
			}
		}
		r.Schema = types.StringValue(resp.Schema)
		r.Tags = []types.String{}
		for _, v := range resp.Tags {
			r.Tags = append(r.Tags, types.StringValue(v))
		}
		r.Title1 = types.StringValue(resp.Title1)
		r.UpdatedAt = types.StringValue(resp.UpdatedAt.Format(time.RFC3339Nano))
		if resp.Account == nil {
			r.Account = nil
		} else {
			r.Account = &tfTypes.BaseRelation{}
			if len(r.Account.DollarRelation) > len(resp.Account.DollarRelation) {
				r.Account.DollarRelation = r.Account.DollarRelation[:len(resp.Account.DollarRelation)]
			}
			for dollarRelationCount, dollarRelationItem := range resp.Account.DollarRelation {
				var dollarRelation1 tfTypes.DollarRelation
				dollarRelation1.Tags = []types.String{}
				for _, v := range dollarRelationItem.Tags {
					dollarRelation1.Tags = append(dollarRelation1.Tags, types.StringValue(v))
				}
				dollarRelation1.EntityID = types.StringValue(dollarRelationItem.EntityID)
				if dollarRelationCount+1 > len(r.Account.DollarRelation) {
					r.Account.DollarRelation = append(r.Account.DollarRelation, dollarRelation1)
				} else {
					r.Account.DollarRelation[dollarRelationCount].Tags = dollarRelation1.Tags
					r.Account.DollarRelation[dollarRelationCount].EntityID = dollarRelation1.EntityID
				}
			}
			if resp.Account.AdditionalProperties == nil {
				r.Account.AdditionalProperties = types.StringNull()
			} else {
				additionalPropertiesResult1, _ := json.Marshal(resp.Account.AdditionalProperties)
				r.Account.AdditionalProperties = types.StringValue(string(additionalPropertiesResult1))
			}
		}
		if len(r.Address) > len(resp.Address) {
			r.Address = r.Address[:len(resp.Address)]
		}
		for addressCount, addressItem := range resp.Address {
			var address1 tfTypes.BaseAddress
			address1.ID = types.StringPointerValue(addressItem.ID)
			address1.Tags = []types.String{}
			for _, v := range addressItem.Tags {
				address1.Tags = append(address1.Tags, types.StringValue(v))
			}
			address1.AdditionalInfo = types.StringPointerValue(addressItem.AdditionalInfo)
			address1.City = types.StringPointerValue(addressItem.City)
			if addressItem.Country != nil {
				address1.Country = types.StringValue(string(*addressItem.Country))
			} else {
				address1.Country = types.StringNull()
			}
			address1.PostalCode = types.StringPointerValue(addressItem.PostalCode)
			address1.Street = types.StringPointerValue(addressItem.Street)
			address1.StreetNumber = types.StringPointerValue(addressItem.StreetNumber)
			if addressCount+1 > len(r.Address) {
				r.Address = append(r.Address, address1)
			} else {
				r.Address[addressCount].ID = address1.ID
				r.Address[addressCount].Tags = address1.Tags
				r.Address[addressCount].AdditionalInfo = address1.AdditionalInfo
				r.Address[addressCount].City = address1.City
				r.Address[addressCount].Country = address1.Country
				r.Address[addressCount].PostalCode = address1.PostalCode
				r.Address[addressCount].Street = address1.Street
				r.Address[addressCount].StreetNumber = address1.StreetNumber
			}
		}
		if resp.Birthdate != nil {
			r.Birthdate = types.StringValue(resp.Birthdate.String())
		} else {
			r.Birthdate = types.StringNull()
		}
		r.CustomerNumber = types.StringPointerValue(resp.CustomerNumber)
		if len(r.Email) > len(resp.Email) {
			r.Email = r.Email[:len(resp.Email)]
		}
		for emailCount, emailItem := range resp.Email {
			var email1 tfTypes.BaseEmail
			email1.ID = types.StringPointerValue(emailItem.ID)
			email1.Tags = []types.String{}
			for _, v := range emailItem.Tags {
				email1.Tags = append(email1.Tags, types.StringValue(v))
			}
			email1.Email = types.StringValue(emailItem.Email)
			if emailCount+1 > len(r.Email) {
				r.Email = append(r.Email, email1)
			} else {
				r.Email[emailCount].ID = email1.ID
				r.Email[emailCount].Tags = email1.Tags
				r.Email[emailCount].Email = email1.Email
			}
		}
		r.FirstName = types.StringValue(resp.FirstName)
		r.LastName = types.StringValue(resp.LastName)
		if len(r.Phone) > len(resp.Phone) {
			r.Phone = r.Phone[:len(resp.Phone)]
		}
		for phoneCount, phoneItem := range resp.Phone {
			var phone1 tfTypes.BasePhone
			phone1.ID = types.StringPointerValue(phoneItem.ID)
			phone1.Tags = []types.String{}
			for _, v := range phoneItem.Tags {
				phone1.Tags = append(phone1.Tags, types.StringValue(v))
			}
			phone1.Phone = types.StringValue(phoneItem.Phone)
			if phoneCount+1 > len(r.Phone) {
				r.Phone = append(r.Phone, phone1)
			} else {
				r.Phone[phoneCount].ID = phone1.ID
				r.Phone[phoneCount].Tags = phone1.Tags
				r.Phone[phoneCount].Phone = phone1.Phone
			}
		}
		if resp.Salutation != nil {
			r.Salutation = types.StringValue(string(*resp.Salutation))
		} else {
			r.Salutation = types.StringNull()
		}
		if resp.Title != nil {
			r.Title = types.StringValue(string(*resp.Title))
		} else {
			r.Title = types.StringNull()
		}
	}
}
